#+AUTHOR: Luxa
#+TITLE: Linux Documentation for ChromaDB-Plugin-for-LM-Studio 
#+DESCRIPTION: Documentation about Linux usecases and research for the ChromaDB-Plugin-for-LM-Studio by BBC-Esq.
#+OPTIONS: :TOC: 2 
#+PROPERTY: header-args :tangle installer.sh


* Main Goals

** Overview

This document will be a resource for the Linux implementations of the ChromaDB-Plugin-for-LM-Studio by BBC-Esq
and provides information related to installing and running of this tool.

Also provides concepts and ideas around testing the install script for the following linux distributions:

*** Arch

Arch would be distro's like Manjaro and EndeavourOS.

*** Debian-Based:

Debian would be distro's like Ubuntu, Mint, Pop!OS, ElementaryOS.

*** RHEL-Based:

RHEL would distro's like Fedora, Rocky, CentOS.

These distributions ship with their own package-manager and tools, so a well defined script for every distro would be the goal.

** Install script 

A well defined script for linux users with the following criteria:

 - Distro-Specific installer
 - Python-installer
 - Creating Python virtual env
 - Installing dependencies inside of venv

* Long-Term Goals:

 - Container-Based Dockerfiles for the 3 supported distributions.
 - Docker implementation of the Plugin.
 - Automatic testing of the installer.
 - QT/UI based installer.

** Container-Based testing:

Write 3 Dockerfiles for testing if the install script is succesfull.

** Docker implementation:

Write a Dockerfile (Ubuntu-Based) containerizing the workflow and useage of the Plugin.

Rebuilding the Plugin to a containerized format has some quirks and drawbacks, see :container: for more info.

** Automatic testing:

Define a workflow for testing the succesfullness of installing and launching the plugin and creating logfiles regarding the test.
Runs the 3 Dockerfiles simultaneously and creates 3 logfiles in the /Logs directory.

** QT/GUI Installer:

Build and transform the bash script into a python-based QT/tkinter installer, try to keep the bash script as a runtime and build a GUI interface on top of the installer options. 


* Linux Based Installer:

Details about the shell script are defined here.

The script needs to install the following dependencies.

** Linux dependency list.

*General-Packages*
- PciUtils
- Python3.10+
- Python3.10-venv or above
- Git
- Git_LFS
- Make/Cmake
- Pandoc
*Nvidia*
- Nvidia-Utils
- Cuda
- Nvml
- Nvidia-Toolkit
*AMD*
- mesa-vulkan-drivers
- libdrm-amdgpu1
- Rocm
*Packages to test*
- portaudio19-dev
- python3-dev
- libxcb-cursor0
*Python-libs*
- Everything within req.txt
- Pytorch 
- Torchvision
- TorchAudio
- xformers
- nvidia-ml
- bitsandbyes

** Steps:

1. Check if python 3.10+ and up is installed
2. Check if python-venv is installed.
3. Install General-Packages.
4. Install GPU-Related packages.


** Setting up shell script:

This is the start of every shellscript here we define what shell to use when running the script, we use a "shebang" to define where this is located:

#+begin_src shell
#+/bin/bash


#+end_src

** General packages:

Here we define what packages generally needed to be installed on the system and is the same for al 3 linux distro's.
Also we define what packages would be needed for a nvidia/amd install

#+begin_src sh

COMMON_PACKAGES="pciutils xpython3.10 pyhton3.10-venv git make pandoc"
NVIDIA_PACKAGES="cuda nvidia-drivers nvidia-utils"
AMD_PACKAGES="mesa-vulkan-drivers rocm"
#+end_src

** Version of installer: 

We define a variable for the installer, this will give us in the future the option to do a check against and if there is a new version we can let the user update:

#+begin_src sh

VERSION="1"
LOGFILE="Linux/logs/installer.log"

#+end_src

** Downloading release:

Lets check if we are already inside of a dir called "ChromaDB-Plugin-for-LM-Studio" if not the case we download the latest release.

#+begin_src sh

check_dir(){
    current_dir=$(basename "$PWD")
    if [ "$current_dir" != "ChromaDB-Plugin-for-LM-Studio" ]; then
        curl "https://github.com/BBC-Esq/ChromaDB-Plugin-for-LM-Studio/archive/refs/tags/v4.0.0.tar.gz"
        tar -xvf v4.0.0.tar.gz # Make sure the file name matches what wget downloads
	cd Chroma*/src
    else 
        echo "Already in the right directory, skipping download"
    fi
}
#+end_src

** Check what OS/Distro:

Check what distro the user is running and change the installer depending on the outcome:

#+begin_src sh

OS="Unknown"
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$NAME
fi

#+end_src

** Detecting GPU

Lets detect what GPU the user has installed, we use pci-utils to check and we save that value within gpu_name variable

#+begin_src sh
select_gpu_packages() {
    gpu_info=$(lspci | grep -i 'VGA\|3D\|Display')

    # Default to no GPU-specific packages
    GPU_PACKAGES=""

    # Check if GPU information is available
    if [ -n "$gpu_info" ]; then
        # Extract GPU name
        gpu_name=$(echo "$gpu_info" | sed -n 's/.*: \(.*\)/\1/p')
        
        # Select GPU-specific packages
        if echo "$gpu_name" | grep -q 'NVIDIA Corporation'; then
            GPU_PACKAGES="nvidia-utils-535"
        elif echo "$gpu_name" | grep -q 'Advanced Micro Devices'; then
            GPU_PACKAGES="mesa-vulkan-drivers rocm"
        elif echo "$gpu_name" | grep -q 'Intel Corporation'; then
            # Specify Intel GPU packages if necessary
            GPU_PACKAGES=""
        fi
    fi
}
#+end_src

** Cuda packages depending on os

#+begin_src sh

install_cuda() {
    local os_version="$1"
    
    case "$os_version" in
        "ubuntu2204")
            wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin
            sudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600
            wget https://developer.download.nvidia.com/compute/cuda/12.3.2/local_installers/cuda-repo-ubuntu2204-12-3-local_12.3.2-545.23.08-1_amd64.deb
            sudo dpkg -i cuda-repo-ubuntu2204-12-3-local_12.3.2-545.23.08-1_amd64.deb
            sudo cp /var/cuda-repo-ubuntu2204-12-3-local/cuda-*-keyring.gpg /usr/share/keyrings/
            sudo apt-get update
            sudo apt-get -y install cuda-toolkit-12-3
            ;;
        "ubuntu2004")
            wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin
            sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600
            wget https://developer.download.nvidia.com/compute/cuda/12.3.2/local_installers/cuda-repo-ubuntu2004-12-3-local_12.3.2-545.23.08-1_amd64.deb
            sudo dpkg -i cuda-repo-ubuntu2004-12-3-local_12.3.2-545.23.08-1_amd64.deb
            sudo cp /var/cuda-repo-ubuntu2004-12-3-local/cuda-*-keyring.gpg /usr/share/keyrings/
            sudo apt-get update
            sudo apt-get -y install cuda-toolkit-12-3
            ;;
        "fedora37")
            wget https://developer.download.nvidia.com/compute/cuda/12.3.2/local_installers/cuda-repo-fedora37-12-3-local-12.3.2_545.23.08-1.x86_64.rpm
            sudo rpm -i cuda-repo-fedora37-12-3-local-12.3.2_545.23.08-1.x86_64.rpm
            sudo dnf clean all
            sudo dnf -y install cuda-toolkit-12-3
            ;;
        "rhel9")
            wget https://developer.download.nvidia.com/compute/cuda/12.3.2/local_installers/cuda-repo-rhel9-12-3-local-12.3.2_545.23.08-1.x86_64.rpm
            sudo rpm -i cuda-repo-rhel9-12-3-local-12.3.2_545.23.08-1.x86_64.rpm
            sudo dnf clean all
            sudo dnf -y install cuda-toolkit-12-3
            ;;
        "debian12")
            wget https://developer.download.nvidia.com/compute/cuda/12.3.2/local_installers/cuda-repo-debian12-12-3-local_12.3.2-545.23.08-1_amd64.deb
            sudo dpkg -i cuda-repo-debian12-12-3-local_12.3.2-545.23.08-1_amd64.deb
            sudo cp /var/cuda-repo-debian12-12-3-local/cuda-*-keyring.gpg /usr/share/keyrings/
            sudo add-apt-repository contrib
            sudo apt-get update
            sudo apt-get -y install cuda-toolkit-12-3
            ;;
        "debian11")
            wget https://developer.download.nvidia.com/compute/cuda/12.3.2/local_installers/cuda-repo-debian11-12-3-local_12.3.2-545.23.08-1_amd64.deb
            sudo dpkg -i cuda-repo-debian11-12-3-local_12.3.2-545.23.08-1_amd64.deb
            sudo cp /var/cuda-repo-debian11-12-3-local/cuda-*-keyring.gpg /usr/share/keyrings/
            sudo add-apt-repository contrib
            sudo apt-get update
            sudo apt-get -y install cuda-toolkit-12-3
            ;;
        *)
            echo "Unsupported OS version"
            ;;
    esac
}
#+end_src
** Step Check if python 3.10+ is installed:

#+begin_src sh

check_python() {
    PYTHON_VERSION=$(python3 --version 2>/dev/null | grep -oP '(?<=Python )\d+\.\d+')
    PYTHON_VENV_PACKAGE="python3.10-venv" 

    if [[ $PYTHON_VERSION < 3.10 ]]; then
        echo "Python 3.10 or higher is not installed. Please install it using your distribution's package manager."
        case $1 in
            "Ubuntu"|"Debian")
                echo "Run: sudo apt install python3.10 python3.10-venv (or higher)" ;;
            "Arch")
                echo "Run: sudo pacman -S python3.10 python3.10-venv (or higher)" ;;
            "RedHat")
                echo "Run: sudo yum install python3.10 python3.10-venv (or higher)" ;;
            *)
                echo "Unsupported distribution." ;;
        esac
    else
        echo "Python 3.10 or higher is installed."
    fi
}

#+end_src


** Install general packages:

Installs from the COMMON_PACKAGES variable:

#+begin_src sh

# Installation function
install_packages() {
    # Define common packages
    COMMON_PACKAGES="pciutils gcc git make pandoc curl wget"
    # Combine common and GPU-specific packages
    INSTALL_PACKAGES="$COMMON_PACKAGES $GPU_PACKAGES"
    # Installation commands based on distribution
    if [[ "$1" == "Ubuntu" || "$1" == "Debian" ]]; then
        apt update
        apt install software-properties-common -y
        add-apt-repository ppa:deadsnakes/ppa -y 
        apt install python3.10-venv -y
        apt install -y $INSTALL_PACKAGES
        apt install build-essential
    elif [[ "$1" == "Arch" ]]; then
        sudo pacman -Syu
        sudo pacman -S cuda
        sudo pacman -S $INSTALL_PACKAGES
    elif [[ "$1" == "RedHat" ]]; then
        sudo yum update
        sudo yum install -y $INSTALL_PACKAGES
    fi
}
#+end_src


** Creating venv

Here we create the env for the program to run in:

#+begin_src sh
create_python_venv() {
    if command -v python3.10 >/dev/null 2>&1; then
        python3.10 -m venv plugin_venv
        echo "Virtual environment created with Python 3.10 in 'plugin_venv' directory."
    elif command -v python3.11 >/dev/null 2>&1; then
        python3.11 -m venv plugin_venv
        echo "Virtual environment created with Python 3.11 in 'plugin_venv' directory."
    elif command -v python3 >/dev/null 2>&1; then
        python3 -m venv plugin_venv
        echo "Virtual environment created with default Python 3 in 'plugin_venv' directory."
    else
        echo "No suitable Python 3 version found. Please install Python 3."
        return 1
    fi
}
#+end_src

** Activating venv

Speaks for itself:

#+begin_src sh
activate_venv() {
    source plugin_venv/bin/activate
    echo "Virtual environment activated."
}
#+end_src

** Pip install

Installs from requirements.txt
For now added some extras:

#+begin_src sh
pip_dependencies() {
    pip install -r requirements.txt
    pip install nvidia-ml-py
    pip install torch
    pip install bitsandbytes
    pip install --no-deps whisper-s2t==1.3.0
    pip install xformers==0.0.24
    echo "Dependencies installed from requirements.txt."
}
#+end_src

** Main function(beta):

#+begin_src sh

main() {
    echo "Starting setup..."

    
    # Determine OS
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$NAME
    else
        echo "Unable to determine operating system."
        exit 1
    fi

    # Select GPU packages based on the system's GPU
    select_gpu_packages
    os_version=$(lsb_release -cs)
   # Checks specific part of the os for cuda 
    case "$os_version" in
        "jammy")
            install_cuda "ubuntu2204"
            ;;
        "focal")
            install_cuda "ubuntu2004"
            ;;
        "fedora37")
            install_cuda "fedora37"
            ;;
        "rhel9")
            install_cuda "rhel9"
            ;;
        "bookworm")
            install_cuda "debian12"
            ;;
        "bullseye")
            install_cuda "debian11"
            ;;
        *)
            echo "Unsupported OS version"
            ;;
    esac
    # Install common and GPU-specific packages
    install_packages "$OS"
    # Check current directory and download if necessary
    check_dir

    # Create and activate a Python virtual environment
    create_python_venv
    activate_venv
    pip install wheel

    # Install Python dependencies
    pip_dependencies

    echo "Setup complete."
}

# Check if the script is being run directly and call main
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main
fi

#+end_src

** Nog tdoen

Make better seperation between installing cuda-->gpu_detection and installing drivers.
Add more options and parameters for installers.
Test on each distro

*"Command to run the script in a ubuntu container"*:
#+begin_src 
sudo docker run --gpus all --rm -v /home/luxa/inter/linux_files/home/luxa/projects/contributing/ChromaDB-Plugin-for-LM-Studio/src/Linux/:/mnt -it ubuntu:22.04 /bin/bash -c "cd /mnt && ./installer.
#+end_src
